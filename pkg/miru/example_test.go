package miru_test

import (
	"fmt"
	"log"

	"github.com/influx6/groundlayer/pkg/miru"
)

func ExamplePageAndLayout() {
	var dir = miru.NewVDir("./testdata")
	var indexFile, err = dir.GetFile("index.html")
	if err != nil {
		log.Fatalf("Failed: %s", err)
	}

	var parsedData, parseErr = indexFile.Parse(miru.DefaultOption, nil)
	if parseErr != nil {
		log.Fatalf("Failed: %s", parseErr)
	}

	var parsedString, parsedStrErr = parsedData.Format("example")
	if parsedStrErr != nil {
		log.Fatalf("Failed: %s", parsedStrErr.Error())
	}

	fmt.Println(parsedString)
	//
	/*// Source is auto-generated by miru. DO NOT EDIT

	package example

	import (
		"github.com/influx6/groundlayer/pkg/domu"

		helpers "github.com/influx6/groundlayer/pkg/helpers"
		peji "github.com/influx6/groundlayer/pkg/peji"
	)

	// Generated go-based types from template

	// Generated go-based functions from template

	// definedTemplate11 is a template defined in "header.render.html#header"
	func definedTemplate11(page *peji.Page, ctx interface{}, rootDoc *domu.Node) {
		var text13 = domu.Text("")
		text13.Mount(rootDoc)
		var node14 = domu.Element("", "node14")
		var text15 = domu.Text("-- component: header --")
		text15.Mount(node14)

		node14.Mount(rootDoc)

	}

	// Generated go-based rendering of output template

	func RenderLayout(page *peji.Page, ctx string, rootDoc *domu.Node) {
		var text1 = domu.Text("")
		text1.Mount(rootDoc)
		var text2 = domu.Text("\n\n")
		text2.Mount(rootDoc)
		var node3 = domu.Element("section", "node3")
		var attr4 = domu.NewStringListAttr("id", "")
		attr4.Add("product_list")
		attr4.Mount(node3)
		var text5 = domu.Text(" \n\t")
		text5.Mount(node3)
		var node6 = domu.Element("Label", "node6")
		var text7 = domu.Text("")
		text7.Mount(node6)
		helpers.AttachToNode(ctx, node6)

		var text8 = domu.Text("")
		text8.Mount(node6)

		node6.Mount(node3)

		var text9 = domu.Text("\n")
		text9.Mount(node3)

		node3.Mount(rootDoc)

		var text10 = domu.Text("\n\n\n")
		text10.Mount(rootDoc)

		definedTemplate11(ctx, rootDoc)

	}
	*/
}
