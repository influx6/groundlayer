/**
 * A cached reference to the hasOwnProperty function.
 */
const hasOwnProperty = Object.prototype.hasOwnProperty;

// KeyMap defines a map type with string keys and boolean pairs.
export type KeyMap = {
  [x: string]: boolean;
};

// ToKebabCase returns the kebab case of giving string.
export function ToKebabCase(str: string): string {
  const result = str.replace(/[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g, (match) => '-' + match.toLowerCase());
  return str[0] === str[0].toUpperCase() ? result.substring(1) : result;
}

/**
 * A constructor function that will create blank objects.
 */
export function Blank() {}
Blank.prototype = Object.create(null);

/**
 * Used to prevent property collisions between our "map" and its prototype.
 * @param map The map to check.
 * @param property The property to check.
 * @return Whether map has property.
 */
export function has(map: object, property: string): boolean {
  return hasOwnProperty.call(map, property);
}

/**
 * Creates an map object without a prototype.
 */
// tslint:disable-next-line:no-any
export function createMap(): any {
  // tslint:disable-next-line:no-any
  return new (Blank as any)();
}

/**
 * Truncates an array, removing items up until length.
 * @param arr The array to truncate.
 * @param length The new length of the array.
 */
export function truncateArray(arr: Array<{} | null | undefined>, length: number) {
  while (arr.length > length) {
    arr.pop();
  }
}

/**
 * RandomID generates unique IDs for use as pseudo-private/protected names.
 * Similar in concept to
 * <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
 *
 * The goals of this function are twofold:
 *
 * - Provide a way to generate a string guaranteed to be unique when compared
 *  to other strings generated by this function.
 * - Make the string complex enough that it is highly unlikely to be
 *  accidentally duplicated by hand (this is key if you're using `ID`
 *  as a private/protected name on an object).
 *
 *	Use:
 *
 *			var privateName = ID();
 *			var o = { 'public': 'foo' };
 *			o[privateName] = 'bar';
 *
 * Taken from https://gist.github.com/gordonbrander/2230317.
 */
export function RandomID() {
  // Math.random should be unique because of its seeding algorithm.
  // Convert it to base 36 (numbers + letters), and grab the first 9 characters
  // after the decimal.
  return Math.random().toString(36).substr(2, 9);
}

/**
 * IsEqual returns true/false if giving properties are equal.
 * @param a
 * @param b
 */
export function isEqual(a, b) {
  // Create arrays of property names
  const aProps = Object.getOwnPropertyNames(a);
  const bProps = Object.getOwnPropertyNames(b);

  // If number of properties is different,
  // objects are not equivalent
  if (aProps.length != bProps.length) {
    return false;
  }

  for (let i = 0; i < aProps.length; i++) {
    const propName = aProps[i];

    // If values of same property are not equal,
    // objects are not equivalent
    if (a[propName] !== b[propName]) {
      return false;
    }
  }

  // If we made it this far, objects
  // are considered equivalent
  return true;
}
